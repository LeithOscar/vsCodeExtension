{
    "get sintax resources": {
        "scope": "javascript,typescript",
        "prefix": "tfmResources",
        "body": [
            "this._resourcesService.get($2);"
        ],
        "description": "comman sintax resources"
    },
   "get sintax getModelService":{
    "scope": "javascript,typescript",
       "prefix":"tfmGetModelService",
       "body":[
           " public getModel(): $1 {",
            "return this._model;}"
       ]
   },
    "get sintax setTaskActions": {
       "scope": "javascript,typescript",
       "prefix": "tfmtaskActions",
       "body": [
           "let taskActions = {",
               "primary: [",
                   "{",
                       "id: 'cancel',",
                       "order: 0,",
                       "text: this._resourcesService.get('TFM.COMMON.BTN.CANCEL'),",
                       "click: () => { // call to method}",
                   "},",
                   "{",
                       "id: 'save',",
                       "order: 1,",
                       "text: this._resourcesService.get('TFM.COMMON.BTN.SAVE'),",
                       "click: () => { // call to method}",
                   "}",
               "]",
           "} as ITaskActionBar;"
       ],
       "description": "comman sintax to create a toolbar actions"
   },
   "get sintax defaultAuxiliar Window": {
    "scope": "javascript,typescript",
    "prefix": "modalAuxiliar",
    "body": [
    "",
    "import { Component, OnInit } from '@angular/core';",
    "",
    "import {",
    "    FocusService,",
    "    IExecOnKeyData,",
    "    Keys,",
    "    MessagingService,   ",
    "    ZoneTopicsManagerService",
    "} from 'tcc';",
    "",
    "@Component({",
    "    moduleId: module.id,",
    "    selector: 'tfm-${1:componentName}-edit',",
    "    templateUrl: './${1:componentName}.component.html'",
    "})",
    "",
    "export class ${1:componentName}Component implements OnInit{",
    "   ",
    "    private _execOnKey: IExecOnKeyData = null;",
    "    private _show: boolean = false;",
    "    ",
    "    public constructor(",
    "        protected _messagingService: MessagingService,",
    "        private _focusService: FocusService,",
    "        private _zoneTopicsManagerService: ZoneTopicsManagerService,",
    "    ) {  }",
    "",
    "    public  ngOnInit(): void {",
    "       ",
    "        this.subscribeZoneShown();",
    "        this._execOnKey = {",
    "            isModal: true,",
    "            enabled: true,",
    "            zone: 'ModalAuxiliarPanel',",
    "            keyConfig: [",
    "                {",
    "                    key: Keys.Esc,",
    "                    action: () => this.cancel()",
    "                },",
    "                {",
    "                    key: Keys.Enter,",
    "                    action: () => this.accept()",
    "                }",
    "            ]",
    "        };",
    "    }",
    "",
    "    public cancel(): void {         ",
    "       this._zoneTopicsManagerService.showModalAuxiliarPanel({",
    "                 show: false,",
    "             });",
    "     }",
    "",
    "    public accept(): void {",
    "     ",
    "    }",
    "",
    "   ",
    "    public get show():boolean {",
    "        return this._show;",
    "    }",
    "    ",
    "    public get execOnKey(): IExecOnKeyData {",
    "        return this._execOnKey;",
    "    }",
    "    private subscribeZoneShown(): void {",
    "        ",
    "        this._messagingService.getSubject('zoneShown').subscribe((zone: any) => {",
    "              if (zone.type === 'ModalAuxiliarPanel' && zone.show && zone.data.id ==='${1:componentName}') {",
    "                  this.init(zone);",
    "                  this._show =true;",
    "                  this.setFocus();",
    "              }",
    "          });",
    "      }",
    "  ",
    "      private setFocus()",
    "      {",
    "          this._focusService.setFocusById('${2:componentName}');",
    "      }",
    "      private init(data:any)",
    "      {",
    "          if (this._mode === ModalAuxiliarMode.create) {",
    "          }",
    "          else { }",
    "      }",
    "",
    "}",
    ""
      ],
    "description": "comman sintax to create a default Modal auxiliar Component"
    },
    "template to create a test file": {
        "prefix": "initTest",
        "scope": "javascript,typescript",
        "body": [
          "import { ${2:componentName}Component } from \"./${2:componentName}.component\";",
          "",
          "describe('${2:componentName} component tests',function(){",
          "",
          "    let component: ${2:componentName}Component = null;",
          "",
          "",
          "    beforeEach(() => {",
          "       ",
          "        component = new ${2:componentName}Component();",
          "",
          "    });",
          "",
          "    describe('onInit method', function(){",
          "",
          "",
          "",
          "    });",
          "",
          "});"
        ],
        "description": "template to create a test file"
      },
      "default html modalAulixiar": {
          "prefix": "htmlModalAuxiliar",
          "scope": "html",
          "body": [
                "<div id=\"nombredeMiComponent\" class=\"verticalLayout stretchContainer\" style=\"width: 21.875rem;\">",
                "    <div class=\"rowAvailable verticalLayout\" [tccExecOnKey]=\"execOnKey\" *ngIf=\"show\">",
                "",
                "        <div class=\"rowAuto horizontalLayout\">",
                "            <div class=\"colAvailable\">",
                "                <h3 class=\"titleSection\">",
                "                    {{ resources.mititleKey | translate }}",
                "                </h3>",
                "            </div>",
                "            <div class=\"colAuto closeButton\">",
                "                <button type=\"button\" (click)=\"cancel()\">",
                "                    <tcc-icon iconKey=\"closeIcon\" class=\"panelCloseIcon\"></tcc-icon>",
                "                </button>",
                "            </div>",
                "        </div>",
                "        <div class=\"separatorHorizontal\"></div>",
                "",
                "",
                "        <div class=\"rowAvailable verticalLayout\" style=\"padding:0 0.5rem;\">",
                "",
                "            <!-- add all elements here without any class except fieldset group-->",
                "            <!-- EXAMPLE",
                "            <cor-f2-personas id=\"f2Persona\" [(personaCorrelationId)]=\"model.personCorrelationId\" corF2WindowTitle=\"{{'TFM.PERSONF2.TITLE' | translate }}\"",
                "                corF2InputLabel=\"TFM.COMMON.RECEIVERLABEL\" corF2TccRequired>",
                "            </cor-f2-personas>",
                "            <tcc-drop-down-list id=\"ddlKey\" [(ngModel)]=\"model.key\" tccLabel=\"TFM.COMMON.TITLE.KEY\" [data]=\"keyOptionsDataSource\"",
                "                [itemTemplate]=\"genericTypeTemplate\" [valueTemplate]=\"genericTypeTemplate\" textField=\"descriptionKey\"",
                "                valueField=\"id\" (valueChange)=\"onKeyOptionsChanged($event)\" tccRequired tccLabelFixed",
                "                tccValidationAlertOptions=\"disabled:true;\">",
                "            </tcc-drop-down-list>",
                "",
                "            -->",
                "        </div>",
                "",
                "        <div class=\"rowAuto horizontalLayout\">",
                "            <div class=\"colAvailable\"></div>",
                "            <div class=\"colAuto\">",
                "                <tcc-accept-cancel-buttons (acceptClick)=\"accept()\" (cancelClick)=\"cancel()\">",
                "                </tcc-accept-cancel-buttons>",
                "            </div>",
                "        </div>",
                "    </div>",
                "</div>"
          ],
          "description": "template to create a test file"
        }
}