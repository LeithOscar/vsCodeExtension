{
    "get sintax resources": {
        "scope": "javascript,typescript",
        "prefix": "tfmResources",
        "body": [
            "this._resourcesService.get($2);"
        ],
        "description": "comman sintax resources"
    },
   "get sintax getModelService":{
    "scope": "javascript,typescript",
       "prefix":"tfmGetModelService",
       "body":[
           " public getModel(): $1 {",
            "return this._model;}"
       ]
   },
    "get sintax setTaskActions": {
       "scope": "javascript,typescript",
       "prefix": "tfmtaskActions",
       "body": [
           "let taskActions = {",
               "primary: [",
                   "{",
                       "id: 'cancel',",
                       "order: 0,",
                       "text: this._resourcesService.get('TFM.COMMON.BTN.CANCEL'),",
                       "click: () => { // call to method}",
                   "},",
                   "{",
                       "id: 'save',",
                       "order: 1,",
                       "text: this._resourcesService.get('TFM.COMMON.BTN.SAVE'),",
                       "click: () => { // call to method}",
                   "}",
               "]",
           "} as ITaskActionBar;"
       ],
       "description": "comman sintax to create a toolbar actions"
   },
   "get sintax defaultAuxiliar Window": {
    "scope": "javascript,typescript",
    "prefix": "modalAuxiliar",
    "body": [
        "",
    "import { Component, OnInit } from '@angular/core';",
    "import { Subscription } from 'rxjs/Rx';",
    "",
    "import {",
    "    FocusService,",
    "    IExecOnKeyData,",
    "    Keys,",
    "    MessagingService",
    "} from 'tcc';",
    "",
    "@Component({",
    "    moduleId: module.id,",
    "    selector: 'tfm-${1:componentName}-edit',",
    "    templateUrl: './identificationEdit.component.html'",
    "})",
    "",
    "export class ${1:componentName}Component implements OnInit{",
    "   ",
    "    private _execOnKey: IExecOnKeyData = null;",
    "    private _mode :ModalAuxiliarMode = ModalAuxiliarMode.create;",
    "    private _zoneShownSubscription: Subscription = null;",
    "",
    "    public constructor(private _messagingService: MessagingService,",
    "        private _focusService: FocusService){",
    "",
    "    }",
    "",
    "    public  ngOnInit(): void {",
    "       ",
    "        this._execOnKey = {",
    "            isModal: true,",
    "            enabled: true,",
    "            zone: 'ModalAuxiliarPanel',",
    "            keyConfig: [",
    "                {",
    "                    key: Keys.Esc,",
    "                    action: () => this.cancel()",
    "                },",
    "                {",
    "                    key: Keys.Enter,",
    "                    action: () => this.accept()",
    "                }",
    "            ]",
    "        };",
    "",
    "        this._zoneShownSubscription = this._messagingService.getSubject('zoneShown').subscribe(async (zone) => {",
    "            if (zone.type === 'ModalAuxiliarPanel' && zone.show) {",
    "                this.init(zone);                ",
    "            }",
    "        });",
    "",
    "    }",
    "",
    "    private init(zone:any)",
    "    {",
    "        this.setFocus();",
    "    }",
    "",
    "    public cancel(): void {",
    "        ",
    "    }",
    "",
    "    public accept(): void {",
    "        ",
    "    }",
    "",
    "    private _show: boolean = null;",
    "    ",
    "    public get show():boolean {",
    "        return this._show;",
    "    }",
    "    ",
    "    public set show(value: boolean) {",
    "        this._show = value;",
    "    }",
    "",
    "    private setFocus()",
    "    {",
    "        this._focusService.setFocusById('${2:focusField}');",
    "    }",
    "    ",
    "    ",
    "}",
    ""
        
    ],
    "description": "comman sintax to create a default Modal auxiliar Component"
    }
}